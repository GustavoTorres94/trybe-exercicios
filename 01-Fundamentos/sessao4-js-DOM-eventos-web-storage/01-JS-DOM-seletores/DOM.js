/* √© a uni√£o do HTML com o Javascript. 
 document.getElementById = DOM
 DOM √© uma ferramento do JS !! Utiliza√ß√£o de Cookie. SelfStorage. LocalStore guarda a informa√ß√£o, mesmo ap√≥s encerramento do Browser. 
 No dom as paginas da interwebs sao representadas por     n√≥s e objetos

 o que √© n√≥s?

 o que √© objeto?

 √â poss√≠vel manipular o HTML de duas formas: 
 (1) alterando textos e propriedades de elementos; 
(1) Para alterar o texto de um elemento, √© preciso ter acesso a ele.

 (2) criando novos elementos e adicionando-os ao HTML.
 (2) Para adicionar um novo elemento no HTML, √© preciso ‚Äúacoplar‚Äù o elemento criado a outro elemento HTML üòâ.

 Ferramentas de manipula√ß√£o DOM:

 document.getElementByID('insira o ID Aqui')  == quando o elemento est√° associado a um ID <div id='barabam'>
 document.getElementsByClassName('insira a Classe Aqui') == quando estpa associado a uma class <div class="xablau">
 document.getElementByTagName('Insira a TAG aqui')  == vai procurar todos os elementos da tag assiciada <header>???
 document.querySelector('Seletor CSS')  == retorna o primeiro metodo encontrado, n√£o t√° muito claro aida
 document.querySelectorAll('Seletor CSS') == vai selecionar todos os elementos CSS correspondentes, (leo usou esse, mas n√µa lembro)

 Para recordar üß†: Um seletor CSS √© a primeira informa√ß√£o que faz parte de uma declara√ß√£o CSS. √â um padr√£o de elementos HTML, como tags,
 ids e classes, que informam ao navegador os elementos que v√£o receber as aplica√ß√µes das regras determinadas pelas propriedades
 e pelos valores de estiliza√ß√£o.



 da pra fazer importa√ß√£o externa, igual ao que √© feito ao CSS
 o script vai no final do body, para poder carregar todos os Elementos HTMl primeiro!

 o que √© o DOCUMENT.?
 √© o que guarda todas as infos na pagina HTML


###################################################### document.getElementById('ID') ###########################################
N√£o vai imprimir nenhuma informa√ß√£o fora do console
para exibir deve ser usado o console.log ()

document.seletor('').innerHTML === Seleciona apenas as partes que est√£o dentro das tags html, exercicio de ler apenas o conteudo, mas vai trazer
                                    todas as modifica√ß√µes e tags que vem no texto 

document.seletor('').innerText === traz os textos com as tags filtradas !!


###################################################### document.getElementsByClassName('Class') ################################

Podem ser aplicadas mais de uma vez em elementos diferentes. 

HTMLcollection = muito parecido com uma array e pode ser acessado por seu index do valor

document.getElemntsByClassName('class') == vai me retornar o HTML collection daquela class especificada

document.getElemntsByClassName('class')[index] = para poder acessar um =??Ou mais??= index daquela HTML collection, para que eu possa modificar

document.getElemntsByClassName('class')[index].innerText = ""  === para alterar a propriedade de texto

document.getElemntsByClassName('class')[index].style. = para acessar as fun√ß√µes de estilo daquele elemento

Para percorrer todos os indices da HYMLCollection √© s√≥ salvar em uma vari√°vel e fazer um loop for,,, sim, at√© aqui tem for,,, 

let teste = document.getElemntsByClassName('class');
for (let i = = 0; i < teste.length; i++) {
    c√≥digo do que quer ser feito em cada elemento.
}

pode transformar o HTML Collection em array, assim posso usar todos os comandos de uma array comum
1) primeiro preciso declarar o documents em uma variabel
2) depois uso esse comando: Array.from(vari√°velQueCrieiNoPasso1)
3) profit

Segundo mode de transformar o HTMLCollection em Array

const sss = document.getElementsByClassName('xablau')
1) fa√ßo um spread dessa variable 
2) Arraysss = [...sss]
3) Xablau


########################################################### document.getElementsByTagName('') ####################################

tamb√©m retorna o HTMLCOLLECTION !! 

o que tem plural pode retornar esse lista???

Mesma l√≥gica do document.getElementsByClassName('class')


############################################################# document.querySelector('Algo') #######################################
retorna um elemento apenas e o primeiro elemento encontrado pelo seletor CSS.

trabalha apenas com seletores CSS

mais flex√≠vel 

seletor de ID √© #
seletor de class √© #
pode ser usado para acessar os indices dentro do # ou . 
ex.:

#idid img{} :       #### dentro de tal id 


############################################################ document.querySelectorAll('algo') ########################################

funciona quase da mesma maneira  que o querrySelector s√≥ que retorna uma array com os elementos.
retorna todos os elementos

trabalha nos mesmos moldes do seletores de CSS

retorna um NODELIST, nao um HTMLCollection
Tamb√©m pode ser transformada em uma Array 


############################################################# document.parentNode('') ##################################################

conseguimos acesssar o elemento pai de um elemento atravas do .parentNode
document.querySelector('aa').parentNode.parentNode

De olho na dica üëÄ: A propriedade parentNode est√° presente em todos os elementos HTML.
Note que ela √© uma propriedade, n√£o uma fun√ß√£o. Por isso, n√£o √© executada com par√™nteses.

previousSibling.: retorna para o elemento irm√£o anterior, caso tenha. ANTERIOR

nextSibling: avan√ßa pra o primeiro elemento da sequencia, caso haja. POSTERIOR pega  o proximo n√≥, idependente se for elemento(tag) ou n√£o (puro)

firstChild : Encontra o primeiro elemento filho associado

lastChild : encontra o √∫ltimo elemnto filho associado

parentElement: Retorna o elemento-pai. Nesse caso, se o n√≥-pai n√£o for um elemento HTML, essa propriedade retornar√° null.

childNodes: Retorna um NodeList com todos os n√≥s filhos.

children: Retorna um HTMLCollection com todos os elementos filhos.

firstElementChild: Retorna o primeiro elemento filho.

lastElementChild: Retorna o √∫ltimo elemento filho.

nextElementSibling: Retorna o pr√≥ximo elemento. ignora os textos puros e vai para a tag

previousElementSibling: Retorna o elemento anterior.


#################################################################### CRIANDO ELEMENTOS NO HTML !! #############################################


Boa pratica √© usar vari√°vel pra quase tudo 


createElement('tag')

para criar, pode ser criado qualquer tag que deseharmos, s√≥ resta estudar pra saber como !!
o createElement n√£o adiciona nada ao HTML

para adicionar o  elemento criado devemos usar o comando 

appendChild(ELEMENTOFILHO)

√© adicionado o elemento filho. ent√£o devemos colocar o elemento pai em uma vara√°vel e adicionar o elemento filho como se estivesse recebendo

cuidado pra n√£o substituir!!


 */
